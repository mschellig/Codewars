using NUnit.Framework;
using System;
using System.Linq;

namespace _4kyu_Implementations.Snail
{
    public class SnailTest
    {
        [Test]
        public void SnailTest1()
        {
            int[][] array =
            {
                new[] { 1, 2, 3 },
                new[] { 4, 5, 6 },
                new[] { 7, 8, 9 }
            };
            var r = new[] { 1, 2, 3, 6, 9, 8, 7, 4, 5 };
            Test(array, r);
        }

        [Test]
        public void SnailTest2()
        {
            int[][] array =
           {
                new[] {946,956,647,326,514,74,302,222,14,568,444,488,337,699,730,469,918,26,405,886,580,570,483},
                new[] {201,125,702,683,639,193,761,270,161,970,254,286,752,634,409,914,872,185,37,22,987,742,75},
                new[] {375,48,679,832,189,785,229,435,225,362,136,461,716,307,901,220,839,863,578,852,321,162,342},
                new[] {849,589,748,656,281,222,355,744,363,765,587,324,231,334,11,12,270,612,435,973,138,13,854},
                new[] {870,660,941,125,303,428,175,907,609,910,206,522,270,937,336,349,186,441,938,651,642,83,707},
                new[] {600,219,192,998,373,52,79,901,908,72,590,395,330,891,647,567,125,754,622,336,773,522,862},
                new[] {512,391,388,797,786,551,578,948,101,234,421,107,920,936,141,822,535,810,428,12,153,930,49},
                new[] {692,448,752,450,927,53,252,424,405,119,629,845,202,302,752,793,679,633,471,515,912,474,971},
                new[] {270,127,113,209,530,75,63,9,761,499,734,866,741,422,818,145,183,185,199,107,352,951,8},
                new[] {926,367,745,74,916,768,585,45,656,337,934,40,49,970,47,774,425,25,905,109,472,706,580},
                new[] {202,685,427,674,980,999,400,779,654,952,315,120,857,648,674,46,583,754,618,210,608,99,194},
                new[] {882,917,72,274,448,599,113,596,475,30,619,792,251,935,33,233,25,263,831,994,367,359,404},
                new[] {82,937,94,485,6,60,509,96,447,606,940,773,662,714,64,492,631,240,402,417,454,477,352},
                new[] {172,760,609,415,862,332,935,551,353,571,983,706,611,355,25,401,208,526,48,190,850,755,497},
                new[] {199,99,530,463,950,162,653,190,350,606,273,539,886,288,114,460,39,887,129,295,957,406,289},
                new[] {442,495,949,211,842,577,271,177,971,44,983,510,822,891,164,287,983,808,124,844,517,306,817},
                new[] {342,778,82,17,685,862,184,7,610,194,372,242,228,952,614,298,227,598,721,842,59,211,216},
                new[] {484,25,904,105,967,717,250,411,502,752,200,476,947,473,973,436,949,92,65,771,947,327,280},
                new[] {1000,317,472,173,805,937,997,738,486,593,336,255,652,453,647,266,807,87,887,45,829,363,227},
                new[] {427,452,510,260,312,87,983,854,562,518,171,988,724,103,803,100,470,395,388,695,82,853,731},
                new[] {696,30,697,418,983,142,200,347,637,815,620,960,935,504,435,254,356,253,737,110,312,392,445},
                new[] {913,890,174,604,36,734,690,327,170,418,981,763,761,891,427,773,763,857,752,41,629,902,946},
                new[] {699,84,781,656,752,179,600,206,860,16,933,533,156,559,331,943,559,789,306,263,364,154,220}
            };




            var r = new[] { 946, 956, 647, 326, 514, 74, 302, 222, 14, 568, 444, 488, 337, 699, 730, 469, 918, 26, 405, 886, 580, 570, 483, 75, 342, 854, 707, 862, 49, 971, 8, 580, 194, 404, 352, 497, 289, 817, 216, 280, 227, 731, 445, 946, 220, 154, 364, 263, 306, 789, 559, 943, 331, 559, 156, 533, 933, 16, 860, 206, 600, 179, 752, 656, 781, 84, 699, 913, 696, 427, 1000, 484, 342, 442, 199, 172, 82, 882, 202, 926, 270, 692, 512, 600, 870, 849, 375, 201, 125, 702, 683, 639, 193, 761, 270, 161, 970, 254, 286, 752, 634, 409, 914, 872, 185, 37, 22, 987, 742, 162, 13, 83, 522, 930, 474, 951, 706, 99, 359, 477, 755, 406, 306, 211, 327, 363, 853, 392, 902, 629, 41, 752, 857, 763, 773, 427, 891, 761, 763, 981, 418, 170, 327, 690, 734, 36, 604, 174, 890, 30, 452, 317, 25, 778, 495, 99, 760, 937, 917, 685, 367, 127, 448, 391, 219, 660, 589, 48, 679, 832, 189, 785, 229, 435, 225, 362, 136, 461, 716, 307, 901, 220, 839, 863, 578, 852, 321, 138, 642, 773, 153, 912, 352, 472, 608, 367, 454, 850, 957, 517, 59, 947, 829, 82, 312, 110, 737, 253, 356, 254, 435, 504, 935, 960, 620, 815, 637, 347, 200, 142, 983, 418, 697, 510, 472, 904, 82, 949, 530, 609, 94, 72, 427, 745, 113, 752, 388, 192, 941, 748, 656, 281, 222, 355, 744, 363, 765, 587, 324, 231, 334, 11, 12, 270, 612, 435, 973, 651, 336, 12, 515, 107, 109, 210, 994, 417, 190, 295, 844, 842, 771, 45, 695, 388, 395, 470, 100, 803, 103, 724, 988, 171, 518, 562, 854, 983, 87, 312, 260, 173, 105, 17, 211, 463, 415, 485, 274, 674, 74, 209, 450, 797, 998, 125, 303, 428, 175, 907, 609, 910, 206, 522, 270, 937, 336, 349, 186, 441, 938, 622, 428, 471, 199, 905, 618, 831, 402, 48, 129, 124, 721, 65, 887, 87, 807, 266, 647, 453, 652, 255, 336, 593, 486, 738, 997, 937, 805, 967, 685, 842, 950, 862, 6, 448, 980, 916, 530, 927, 786, 373, 52, 79, 901, 908, 72, 590, 395, 330, 891, 647, 567, 125, 754, 810, 633, 185, 25, 754, 263, 240, 526, 887, 808, 598, 92, 949, 436, 973, 473, 947, 476, 200, 752, 502, 411, 250, 717, 862, 577, 162, 332, 60, 599, 999, 768, 75, 53, 551, 578, 948, 101, 234, 421, 107, 920, 936, 141, 822, 535, 679, 183, 425, 583, 25, 631, 208, 39, 983, 227, 298, 614, 952, 228, 242, 372, 194, 610, 7, 184, 271, 653, 935, 509, 113, 400, 585, 63, 252, 424, 405, 119, 629, 845, 202, 302, 752, 793, 145, 774, 46, 233, 492, 401, 460, 287, 164, 891, 822, 510, 983, 44, 971, 177, 190, 551, 96, 596, 779, 45, 9, 761, 499, 734, 866, 741, 422, 818, 47, 674, 33, 64, 25, 114, 288, 886, 539, 273, 606, 350, 353, 447, 475, 654, 656, 337, 934, 40, 49, 970, 648, 935, 714, 355, 611, 706, 983, 571, 606, 30, 952, 315, 120, 857, 251, 662, 773, 940, 619, 792 };
            Test(array, r);
        }


        public string Int2dToString(int[][] a)
        {
            return $"[{string.Join("\n", a.Select(row => $"[{string.Join(",", row)}]"))}]";
        }

        public void Test(int[][] array, int[] result)
        {
            var text = $"{Int2dToString(array)}\nshould be sorted to\n[{string.Join(",", result)}]\n";
            Console.WriteLine(text);
            Assert.AreEqual(result, SnailSolution.Snail(array));
        }
    }
}